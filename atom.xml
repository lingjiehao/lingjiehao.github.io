<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingjiehao.github.io/"/>
  <updated>2020-07-21T04:04:01.800Z</updated>
  <id>https://lingjiehao.github.io/</id>
  
  <author>
    <name>Hao Lingjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aria2添加开机自启动</title>
    <link href="https://lingjiehao.github.io/2019/09/01/aria2%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>https://lingjiehao.github.io/2019/09/01/aria2添加开机自启动/</id>
    <published>2019-09-01T03:16:46.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>/etc/rc.local</code>的exit 0前添加一句</p><blockquote><p>aria2c –conf-path=/home/michael/.aria2/aria2.conf -D</p></blockquote><p>另附aria2的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">dir=/data/_dl</span><br><span class="line">on-download-complete=/conf/on-complete.sh</span><br><span class="line">input-file=/conf/aria2.session</span><br><span class="line">save-session=/conf/aria2.session</span><br><span class="line">rpc-secret=[RPC密码]</span><br><span class="line">log-level=warn</span><br><span class="line">enable-http-pipelining=true</span><br><span class="line">disable-ipv6=true</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许非外部访问</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=10</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=10</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line"></span><br><span class="line">#定时保存会话，需要1.16.1之后的release版</span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class="line">#enable-mmap=true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation=falloc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#启用本地节点查找</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line">#添加额外的tracker</span><br><span class="line">#bt-tracker=,…</span><br><span class="line">#单种子最大连接数</span><br><span class="line">#bt-max-peers=55</span><br><span class="line">#强制加密, 防迅雷必备</span><br><span class="line">#bt-require-crypto=true</span><br><span class="line">#当下载的文件是一个种子(以.torrent结尾)时, 自动下载BT</span><br><span class="line">follow-torrent=true</span><br><span class="line">#BT监听端口, 当端口屏蔽时使用</span><br><span class="line">listen-port=53247</span><br><span class="line"></span><br><span class="line">#不确定是否需要，为保险起见，need more test</span><br><span class="line">enable-dht=false</span><br><span class="line">bt-enable-lpd=false</span><br><span class="line">enable-peer-exchange=false</span><br><span class="line">#修改特征</span><br><span class="line">user-agent=uTorrent/2210(25130)</span><br><span class="line">peer-id-prefix=-UT2210-</span><br><span class="line">#修改做种设置, 允许做种</span><br><span class="line">seed-ratio=1</span><br><span class="line">seed-time=5000</span><br><span class="line">#保存会话</span><br><span class="line">force-save=true</span><br><span class="line">bt-hash-check-seed=true</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;/etc/rc.local&lt;/code&gt;的exit 0前添加一句&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aria2c –conf-path=/home/michael/.aria2/aria2.conf -D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另附a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://lingjiehao.github.io/2019/08/05/docker/"/>
    <id>https://lingjiehao.github.io/2019/08/05/docker/</id>
    <published>2019-08-05T01:12:18.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录我在学习使用Docker中遇到的小问题, 我的环境是Ubuntu 16.04</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以使用Docker官方推荐的方法</p><blockquote><p>curl -sSL get.docker.com | sudo sh</p></blockquote><p>当然, Ubuntu的软件仓库中也是有docker的,可以直接使用apt安装</p><blockquote><p>apt install docker.io</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文记录我在学习使用Docker中遇到的小问题, 我的环境是Ubuntu 16.04&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://lingjiehao.github.io/2019/07/09/git/"/>
    <id>https://lingjiehao.github.io/2019/07/09/git/</id>
    <published>2019-07-09T18:58:21.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-shallow-clone"><a href="#git-shallow-clone" class="headerlink" title="git shallow clone"></a>git shallow clone</h2><p>使用<code>--depth</code>参数可以只克隆部分commit历史</p><blockquote><p>git clone –depth=1 <a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git" target="_blank" rel="noopener">https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git</a> </p></blockquote><h2 id="git-clone-–depth-1-获取完整仓库"><a href="#git-clone-–depth-1-获取完整仓库" class="headerlink" title="git clone –depth=1 获取完整仓库"></a>git clone –depth=1 获取完整仓库</h2><blockquote><p>git clone –depth=1 <a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git" target="_blank" rel="noopener">https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git</a><br>cd Xiaomi_Kernel_OpenSource<br>git remote set-branches origin ‘*’<br>git fetch –depth=1 -v </p></blockquote><p>或者在<code>.git/config</code>中做如下修改</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = true</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">[remote "origin"]</span><br><span class="line">url = https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git</span><br><span class="line"><span class="deletion">-fetch = +refs/heads/master:refs/remotes/origin/master</span></span><br><span class="line"><span class="addition">+fetch = +refs/heads/*:refs/remotes/origin/*</span></span><br><span class="line">[branch "README"]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/README</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-shallow-clone&quot;&gt;&lt;a href=&quot;#git-shallow-clone&quot; class=&quot;headerlink&quot; title=&quot;git shallow clone&quot;&gt;&lt;/a&gt;git shallow clone&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;--
      
    
    </summary>
    
    
      <category term="git" scheme="https://lingjiehao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>input子系统分析——以synaptics_dsx TP驱动为例</title>
    <link href="https://lingjiehao.github.io/2019/07/05/input%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E4%BB%A5synaptics-dsx-TP%E9%A9%B1%E5%8A%A8%E4%B8%BA%E4%BE%8B/"/>
    <id>https://lingjiehao.github.io/2019/07/05/input子系统分析——以synaptics-dsx-TP驱动为例/</id>
    <published>2019-07-05T02:16:03.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文所分析的代码基于Qualcomm的开源代码, 内核版本为msm-4.4, 代码地址为: <a href="https://source.codeaurora.org/quic/la/kernel/msm-4.4/tree/?h=LA.UM.7.2.r1-07000-sdm660.0" target="_blank" rel="noopener">https://source.codeaurora.org/quic/la/kernel/msm-4.4/tree/?h=LA.UM.7.2.r1-07000-sdm660.0</a></p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文所分析的代码基于Qualcomm的开源代码, 内核版本为msm-4.4, 代码地址为: &lt;a href=&quot;https://source.
      
    
    </summary>
    
    
      <category term="TP" scheme="https://lingjiehao.github.io/tags/TP/"/>
    
      <category term="Driver" scheme="https://lingjiehao.github.io/tags/Driver/"/>
    
      <category term="Synaptics" scheme="https://lingjiehao.github.io/tags/Synaptics/"/>
    
      <category term="TODO" scheme="https://lingjiehao.github.io/tags/TODO/"/>
    
  </entry>
  
  <entry>
    <title>cron</title>
    <link href="https://lingjiehao.github.io/2019/07/04/cron/"/>
    <id>https://lingjiehao.github.io/2019/07/04/cron/</id>
    <published>2019-07-04T00:37:38.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="crontab-e"><a href="#crontab-e" class="headerlink" title="crontab -e"></a>crontab -e</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Edit this file to introduce tasks to be run by cron.</span><br><span class="line"># </span><br><span class="line"># Each task to run has to be defined through a single line</span><br><span class="line"># indicating with different fields when the task will be run</span><br><span class="line"># and what command to run for the task</span><br><span class="line"># </span><br><span class="line"># To define the time you can provide concrete values for</span><br><span class="line"># minute (m), hour (h), day of month (dom), month (mon),</span><br><span class="line"># and day of week (dow) or use &apos;*&apos; in these fields (for &apos;any&apos;).# </span><br><span class="line"># Notice that tasks will be started based on the cron&apos;s system</span><br><span class="line"># daemon&apos;s notion of time and timezones.</span><br><span class="line"># </span><br><span class="line"># Output of the crontab jobs (including errors) is sent through</span><br><span class="line"># email to the user the crontab file belongs to (unless redirected).</span><br><span class="line"># </span><br><span class="line"># For example, you can run a backup of all your user accounts</span><br><span class="line"># at 5 a.m every week with:</span><br><span class="line"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span><br><span class="line"># </span><br><span class="line"># For more information see the manual pages of crontab(5) and cron(8)</span><br><span class="line"># </span><br><span class="line"># m h  dom mon dow   command</span><br></pre></td></tr></table></figure><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">每隔5秒执行一次：*/5 * * * * ?</span><br><span class="line">每隔1分钟执行一次：0 */1 * * * ?</span><br><span class="line">每天23点执行一次：0 0 23 * * ?</span><br><span class="line">每天凌晨1点执行一次：0 0 1 * * ?</span><br><span class="line">每月1号凌晨1点执行一次：0 0 1 1 * ?</span><br><span class="line">每月最后一天23点执行一次：0 0 23 L * ?</span><br><span class="line">每周星期天凌晨1点实行一次：0 0 1 ? * L</span><br><span class="line">在26分、29分、33分执行一次：0 26,29,33 * * * ?</span><br><span class="line">每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/maybo/p/5189617.html" target="_blank" rel="noopener">https://www.cnblogs.com/maybo/p/5189617.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;crontab-e&quot;&gt;&lt;a href=&quot;#crontab-e&quot; class=&quot;headerlink&quot; title=&quot;crontab -e&quot;&gt;&lt;/a&gt;crontab -e&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="https://lingjiehao.github.io/2019/07/03/SSH/"/>
    <id>https://lingjiehao.github.io/2019/07/03/SSH/</id>
    <published>2019-07-03T22:36:39.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h2><p>ssh-copy-id的作用是把本机的公钥拷贝到服务器上</p><h2 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config"></a>ssh config</h2><p>新建一个<code>~/.ssh/config</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span><br><span class="line">Host abc # abc表示服务器的名字</span><br><span class="line">    HostName 12.34.56.78 # 服务器地址</span><br><span class="line">    User qwe # 用户名</span><br><span class="line">    Port 12345 # 端口号, 不设置则默认为22</span><br><span class="line">    # IdentityFile ~/.ssh/id_rsa # 指定连接这个服务器使用的私钥, SSH v2的默认私钥文件名为`~/.ssh/id_rsa` 和 `~/.ssh/id_dsa`</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>ssh abc</code>直接登录,如果你的密钥和服务器的吻合,就实现了免密登录</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://linux.die.net/man/5/ssh_config" target="_blank" rel="noopener">https://linux.die.net/man/5/ssh_config</a><br><a href="https://deepzz.com/post/how-to-setup-ssh-config.html" target="_blank" rel="noopener">https://deepzz.com/post/how-to-setup-ssh-config.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ssh-copy-id&quot;&gt;&lt;a href=&quot;#ssh-copy-id&quot; class=&quot;headerlink&quot; title=&quot;ssh-copy-id&quot;&gt;&lt;/a&gt;ssh-copy-id&lt;/h2&gt;&lt;p&gt;ssh-copy-id的作用是把本机的公钥拷贝到服务器上&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android中编译单个内核模块</title>
    <link href="https://lingjiehao.github.io/2019/06/25/Android%E4%B8%AD%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/"/>
    <id>https://lingjiehao.github.io/2019/06/25/Android中编译单个内核模块/</id>
    <published>2019-06-25T21:55:27.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>环境: Ubuntu 16.04 + Android P源码<br>源码路径: /home/michael/android_code<br>需要编译的模块路径: 比如 <code>/home/michael/test_module/</code>, 内核模块文件名为<code>test_module.c</code></p><p>那么只需要在<code>/home/michael/test_module/</code>中建立一个Makefile文件就可以编译这个模块了.<br>Makefile的模板如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">obj-m += test_module.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android 源码路径</span></span><br><span class="line">SOURCE_PATH := /home/michael/android_src</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel 的输出目录, &lt;product-name&gt; 因产品而异,下文同</span></span><br><span class="line">KDIR := <span class="variable">$(SOURCE_PATH)</span>/out/target/product/&lt;product-name&gt;/obj/KERNEL_OBJ</span><br><span class="line">PWD :=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line">KERNEL_CFLAGS := KCFLAGS=-mno-android</span><br><span class="line">CROSS := <span class="variable">$(SOURCE_PATH)</span>/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(FLAGS)</span> <span class="variable">$(KDIR)</span> ARCH=arm64 CROSS_COMPILE=<span class="variable">$(CROSS)</span>/aarch64-linux-android- M=<span class="variable">$(PWD)</span> <span class="variable">$(FLAGS)</span> <span class="variable">$(KERNEL_CFLAGS)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.mod.c *.ko *.o .*.cmd *.symvers *.order</span><br><span class="line">rm -rf .tmp_versions</span><br></pre></td></tr></table></figure><p>然后在<code>/home/michael/test_module</code>中输入<code>make</code>, 就会生成下面的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">michael@cd1cab25653e:~/test_module$ make</span><br><span class="line">/usr/bin/makex: line 20: build/envsetup.sh: No such file or directory</span><br><span class="line">/usr/bin/make2 -C  /home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/KERNEL_OBJ ARCH=arm64 CROSS_COMPILE=/home/michael/android_code/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android- M=/home/michael/test_module  KCFLAGS=-mno-android modules</span><br><span class="line">make2[1]: Entering directory '/home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/kernel/msm-4.4'</span><br><span class="line">  CC [M]  /home/michael/test_module/test_module.o</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      /home/michael/test_module/test_module.mod.o</span><br><span class="line">  LD [M]  /home/michael/test_module/test_module.ko</span><br><span class="line">make2[1]: Leaving directory '/home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/kernel/msm-4.4'</span><br><span class="line">michael@cd1cab25653e:~/test_module$ ls -la</span><br><span class="line">total 628</span><br><span class="line">drwxrwxr-x  3 michael michael   4096 Jun 26 14:14 .</span><br><span class="line">drwxr-xr-x 17 michael michael   4096 Jun 26 14:14 ..</span><br><span class="line">-rw-rw-r--  1 michael michael    483 Jun 26 14:14 .test_module.ko.cmd</span><br><span class="line">-rw-rw-r--  1 michael michael  41291 Jun 26 14:14 .test_module.mod.o.cmd</span><br><span class="line">-rw-rw-r--  1 michael michael  51771 Jun 26 14:14 .test_module.o.cmd</span><br><span class="line">drwxrwxr-x  2 michael michael   4096 Jun 26 14:14 .tmp_versions</span><br><span class="line">-rw-rw-r--  1 michael michael    492 Jun 26 14:14 Makefile</span><br><span class="line">-rw-rw-r--  1 michael michael      0 Jun 26 14:14 Module.symvers</span><br><span class="line">-rw-rw-r--  1 michael michael     52 Jun 26 14:14 modules.order</span><br><span class="line">-rw-rw-r--  1 michael michael  10276 May 30 11:14 test_module.c</span><br><span class="line">-rw-rw-r--  1 michael michael 247216 Jun 26 14:14 test_module.ko</span><br><span class="line">-rw-rw-r--  1 michael michael   2277 Jun 26 14:14 test_module.mod.c</span><br><span class="line">-rw-rw-r--  1 michael michael  83424 Jun 26 14:14 test_module.mod.o</span><br><span class="line">-rw-rw-r--  1 michael michael 165320 Jun 26 14:14 test_module.o</span><br></pre></td></tr></table></figure><p>我目前编译的模块都是单文件的,多文件还未尝试,以后遇到编译多文件的时候会更新.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境: Ubuntu 16.04 + Android P源码&lt;br&gt;源码路径: /home/michael/android_code&lt;br&gt;需要编译的模块路径: 比如 &lt;code&gt;/home/michael/test_module/&lt;/code&gt;, 内核模块文件名为&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mount RAW file in Ubuntu</title>
    <link href="https://lingjiehao.github.io/2019/06/06/Mount-RAW-file-in-Ubuntu/"/>
    <id>https://lingjiehao.github.io/2019/06/06/Mount-RAW-file-in-Ubuntu/</id>
    <published>2019-06-06T20:43:46.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讲解如何在Ubuntu下挂载raw image镜像，以raspberry pi官方镜像<strong>2019-04-08-raspbian-stretch-lite.img</strong> 为例</p></blockquote><h2 id="手动挂载"><a href="#手动挂载" class="headerlink" title="手动挂载"></a>手动挂载</h2><ol><li>使用fdisk查看分区结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># fdisk -l</span><br><span class="line"></span><br><span class="line">Disk 2019-04-08-raspbian-stretch-lite.img: 1.7 GiB, 1803550720 bytes, 3522560 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xc1dc39e5</span><br><span class="line"></span><br><span class="line">Device                                Boot Start     End Sectors  Size Id Type</span><br><span class="line">2019-04-08-raspbian-stretch-lite.img1       8192   96042   87851 42.9M  c W95 FA</span><br><span class="line">2019-04-08-raspbian-stretch-lite.img2      98304 3522559 3424256  1.6G 83 Linux</span><br></pre></td></tr></table></figure><p>可以看出，这份镜像的sectors size = 512 bytes，而第一个分区的偏移量是8192 sectors，故偏移的字节为512 * 8192 = 4194304 bytes，下面用mount命令挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mount -o offset=4194304 2019-04-08-raspbian-stretch-lite.img tmp/</span><br></pre></td></tr></table></figure><p>第二个分区同理</p><h2 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h2><p>可以使用losetup这个工具自动挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># losetup -f -P 2019-04-08-raspbian-stretch-lite.img</span><br></pre></td></tr></table></figure><p>查看挂载结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ losetup -l</span><br><span class="line">NAME       SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE                                                    DIO LOG-SEC</span><br><span class="line">/dev/loop0         0      0         0  0 /home/michael/Downloads/2019-04-08-raspbian-stretch-lite.img   0     512</span><br></pre></td></tr></table></figure><p>或者使用lsblk查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">loop0         7:0    0   1.7G  0 loop </span><br><span class="line">├─loop0p1   259:6    0  42.9M  0 loop </span><br><span class="line">└─loop0p2   259:7    0   1.6G  0 loop</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/loop0p1 tmp</span><br></pre></td></tr></table></figure><p>附上losetup的参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ losetup --help</span><br><span class="line">Usage:</span><br><span class="line"> losetup [options] [&lt;loopdev&gt;]</span><br><span class="line"> losetup [options] -f | &lt;loopdev&gt; &lt;file&gt;</span><br><span class="line"></span><br><span class="line">Set up and control loop devices.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -a, --all                     list all used devices</span><br><span class="line"> -d, --detach &lt;loopdev&gt;...     detach one or more devices</span><br><span class="line"> -D, --detach-all              detach all used devices</span><br><span class="line"> -f, --find                    find first unused device</span><br><span class="line"> -c, --set-capacity &lt;loopdev&gt;  resize the device</span><br><span class="line"> -j, --associated &lt;file&gt;       list all devices associated with &lt;file&gt;</span><br><span class="line"> -L, --nooverlap               avoid possible conflict between devices</span><br><span class="line"></span><br><span class="line"> -o, --offset &lt;num&gt;            start at offset &lt;num&gt; into file</span><br><span class="line">     --sizelimit &lt;num&gt;         device is limited to &lt;num&gt; bytes of the file</span><br><span class="line"> -b  --sector-size &lt;num&gt;       set the logical sector size to &lt;num&gt;</span><br><span class="line"> -P, --partscan                create a partitioned loop device</span><br><span class="line"> -r, --read-only               set up a read-only loop device</span><br><span class="line">     --direct-io[=&lt;on|off&gt;]    open backing file with O_DIRECT</span><br><span class="line">     --show                    print device name after setup (with -f)</span><br><span class="line"> -v, --verbose                 verbose mode</span><br><span class="line"></span><br><span class="line"> -J, --json                    use JSON --list output format</span><br><span class="line"> -l, --list                    list info about all or specified (default)</span><br><span class="line"> -n, --noheadings              don&apos;t print headings for --list output</span><br><span class="line"> -O, --output &lt;cols&gt;           specify columns to output for --list</span><br><span class="line">     --raw                     use raw --list output format</span><br><span class="line"></span><br><span class="line"> -h, --help                    display this help</span><br><span class="line"> -V, --version                 display version</span><br><span class="line"></span><br><span class="line">Available output columns:</span><br><span class="line">         NAME  loop device name</span><br><span class="line">    AUTOCLEAR  autoclear flag set</span><br><span class="line">    BACK-FILE  device backing file</span><br><span class="line">     BACK-INO  backing file inode number</span><br><span class="line"> BACK-MAJ:MIN  backing file major:minor device number</span><br><span class="line">      MAJ:MIN  loop device major:minor number</span><br><span class="line">       OFFSET  offset from the beginning</span><br><span class="line">     PARTSCAN  partscan flag set</span><br><span class="line">           RO  read-only device</span><br><span class="line">    SIZELIMIT  size limit of the file in bytes</span><br><span class="line">          DIO  access backing file with direct-io</span><br><span class="line">      LOG-SEC  logical sector size in bytes</span><br><span class="line"></span><br><span class="line">For more details see losetup(8).</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://major.io/2010/12/14/mounting-a-raw-partition-file-made-with-dd-or-dd_rescue-in-linux/" target="_blank" rel="noopener">https://major.io/2010/12/14/mounting-a-raw-partition-file-made-with-dd-or-dd_rescue-in-linux/</a></p><p><a href="https://blog.tinned-software.net/mount-raw-image-of-entire-disc/" target="_blank" rel="noopener">https://blog.tinned-software.net/mount-raw-image-of-entire-disc/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讲解如何在Ubuntu下挂载raw image镜像，以raspberry pi官方镜像&lt;strong&gt;2019-04-08-raspbian-stretch-lite.img&lt;/strong&gt; 为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu Postinstall Tips</title>
    <link href="https://lingjiehao.github.io/2019/06/04/Ubuntu-Postinstall-Tips/"/>
    <id>https://lingjiehao.github.io/2019/06/04/Ubuntu-Postinstall-Tips/</id>
    <published>2019-06-04T05:59:09.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu16-04修改时区"><a href="#Ubuntu16-04修改时区" class="headerlink" title="Ubuntu16.04修改时区"></a>Ubuntu16.04修改时区</h2><blockquote><p>dpkg-reconfigure tzdata</p></blockquote><h2 id="Ubuntu安装Chrome"><a href="#Ubuntu安装Chrome" class="headerlink" title="Ubuntu安装Chrome"></a>Ubuntu安装Chrome</h2><p>64bit:</p><blockquote><p>wget <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></p></blockquote><p>32bit:</p><blockquote><p>wget <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb</a></p></blockquote><p>Then:</p><blockquote><p>dpkg -i xxx.deb</p></blockquote><h2 id="Dual-Boot-Fix-Time-Differences-Between-Ubuntu-And-Windows"><a href="#Dual-Boot-Fix-Time-Differences-Between-Ubuntu-And-Windows" class="headerlink" title="Dual Boot: Fix Time Differences Between Ubuntu And Windows"></a>Dual Boot: Fix Time Differences Between Ubuntu And Windows</h2><p>For Ubuntu 16.04 and newer, run the following command:</p><blockquote><p>timedatectl set-local-rtc 1</p></blockquote><h2 id="Grub-remember-chosen"><a href="#Grub-remember-chosen" class="headerlink" title="Grub remember chosen"></a>Grub remember chosen</h2><p>Modify <code>/etc/default/grub</code></p><blockquote><p>GRUB_DEFAULT=saved<br>GRUB_SAVEDEFAULT=true</p></blockquote><p>Then</p><blockquote><p>update-grub</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu16-04修改时区&quot;&gt;&lt;a href=&quot;#Ubuntu16-04修改时区&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04修改时区&quot;&gt;&lt;/a&gt;Ubuntu16.04修改时区&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;dpkg-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://lingjiehao.github.io/2019/05/23/test/"/>
    <id>https://lingjiehao.github.io/2019/05/23/test/</id>
    <published>2019-05-23T21:33:45.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>This article is for test.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article is for test.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="https://lingjiehao.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04下Android O编译环境的搭建</title>
    <link href="https://lingjiehao.github.io/2019/05/23/Ubuntu-16-04%E4%B8%8BAndroid-O%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://lingjiehao.github.io/2019/05/23/Ubuntu-16-04下Android-O编译环境的搭建/</id>
    <published>2019-05-23T18:45:58.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于安卓编译环境搭建的文章有不少，但质量参差不齐，关于安装哪些软件各有各的说法，这样带来的后果是如果编译出错了，就眉毛胡子一把抓，把所有人说的所有的软件都安装上去，这样有可能带来的问题会更多。</p><p>我搭建编译境的时候幸运地在DigitalOcean上找到了一篇详细介绍安卓编译环境搭建的文章,了解DigitalOcean的人都知道他家的文章质量很高，这篇也不例外，我按照文中的方法搭建后，在AOSP8.1以及公司的代码上都是一次编译成功。</p><p>以下是简单的安装记录，详细介绍请参考<a href="https://www.digitalocean.com/community/tutorials/how-to-build-android-roms-on-ubuntu-16-04" target="_blank" rel="noopener">原文</a>。</p><h2 id="安装repo"><a href="#安装repo" class="headerlink" title="安装repo"></a>安装repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install repo</span><br></pre></td></tr></table></figure><h2 id="配置git的email和username"><a href="#配置git的email和username" class="headerlink" title="配置git的email和username"></a>配置git的email和username</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "your name"</span><br><span class="line">git config --global user.email "mailto:your_email@your_domain.com"</span><br></pre></td></tr></table></figure><h2 id="安装编译所需的软件包"><a href="#安装编译所需的软件包" class="headerlink" title="安装编译所需的软件包"></a>安装编译所需的软件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk android-tools-adb bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc yasm zip zlib1g-dev</span><br></pre></td></tr></table></figure><p>上面三步完成后就可以拉代码编译了，关于如何使用repo拉代码，如何编译不再本文讨论的范围内。</p><p><strong>下面两步是独立的且可选的</strong></p><h2 id="使用ccache加快每次重新编译的速度"><a href="#使用ccache加快每次重新编译的速度" class="headerlink" title="使用ccache加快每次重新编译的速度"></a>使用ccache加快每次重新编译的速度</h2><h3 id="下载ccache"><a href="#下载ccache" class="headerlink" title="下载ccache"></a>下载ccache</h3><p>（注：原文中不是使用apt安装ccache的，而是使用源码中自带ccache，我在源码中没找到，所以使用apt安装了ccache）</p><h3 id="修改ccache所使用的缓存大小"><a href="#修改ccache所使用的缓存大小" class="headerlink" title="修改ccache所使用的缓存大小"></a>修改ccache所使用的缓存大小</h3><p>ccache默认使用的缓存最大值为1G，原文推荐修改为15G，你当然可以设置更大的缓存空间，ccache生成的缓存默认位于用户主目录的.ccache目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccache -M 15G</span><br></pre></td></tr></table></figure><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export USE_CCACHE=1</span><br></pre></td></tr></table></figure><p>为了永久生效，你可以把上面这句话添加到.bashrc中（如果你使用bash的话）。</p><h2 id="限制Jack-Server的内存使用"><a href="#限制Jack-Server的内存使用" class="headerlink" title="限制Jack Server的内存使用"></a>限制Jack Server的内存使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_JACK_VM_ARGS="-Xmx8g -Dfile.encoding=UTF-8 -XX:+TieredCompilation"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上关于安卓编译环境搭建的文章有不少，但质量参差不齐，关于安装哪些软件各有各的说法，这样带来的后果是如果编译出错了，就眉毛胡子一把抓，把所有人说的所有的软件都安装上去，这样有可能带来的问题会更多。&lt;/p&gt;
&lt;p&gt;我搭建编译境的时候幸运地在DigitalOcean上找到了一篇
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="https://lingjiehao.github.io/2019/05/23/vim/"/>
    <id>https://lingjiehao.github.io/2019/05/23/vim/</id>
    <published>2019-05-23T18:40:26.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="增加支持lua"><a href="#增加支持lua" class="headerlink" title="增加支持lua"></a>增加支持lua</h2><blockquote><p>sudo apt install vim-nox</p></blockquote><p>参考: <a href="https://github.com/Shougo/neocomplete.vim" target="_blank" rel="noopener">https://github.com/Shougo/neocomplete.vim</a></p><h2 id="在Ubuntu-16-04上安装vim8"><a href="#在Ubuntu-16-04上安装vim8" class="headerlink" title="在Ubuntu 16.04上安装vim8"></a>在Ubuntu 16.04上安装vim8</h2><blockquote><p>sudo add-apt-repository ppa:jonathonf/vim -y \<br>&amp;&amp; sudo apt update -y \<br>&amp;&amp; sudo apt install vim -y</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;增加支持lua&quot;&gt;&lt;a href=&quot;#增加支持lua&quot; class=&quot;headerlink&quot; title=&quot;增加支持lua&quot;&gt;&lt;/a&gt;增加支持lua&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;sudo apt install vim-nox&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu KVM搭建</title>
    <link href="https://lingjiehao.github.io/2019/05/23/Ubuntu-KVM%E6%90%AD%E5%BB%BA/"/>
    <id>https://lingjiehao.github.io/2019/05/23/Ubuntu-KVM搭建/</id>
    <published>2019-05-23T18:19:59.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考文章:<a href="https://help.ubuntu.com/community/KVM/Installation" target="_blank" rel="noopener">KVM/Installation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考文章:&lt;a href=&quot;https://help.ubuntu.com/community/KVM/Installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KVM/Installation&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu查看crontab运行日志</title>
    <link href="https://lingjiehao.github.io/2019/05/22/Ubuntu%E6%9F%A5%E7%9C%8Bcrontab%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97/"/>
    <id>https://lingjiehao.github.io/2019/05/22/Ubuntu查看crontab运行日志/</id>
    <published>2019-05-22T01:39:55.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改rsyslog"><a href="#修改rsyslog" class="headerlink" title="修改rsyslog"></a>修改rsyslog</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rsyslog.d/50-default.conf</span><br><span class="line">cron.*              /var/<span class="built_in">log</span>/cron.log <span class="comment">#将cron前面的注释符去掉</span></span><br></pre></td></tr></table></figure><h2 id="重启rsyslog"><a href="#重启rsyslog" class="headerlink" title="重启rsyslog"></a>重启rsyslog</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  service rsyslog  restart</span><br></pre></td></tr></table></figure><h2 id="查看crontab日志"><a href="#查看crontab日志" class="headerlink" title="查看crontab日志"></a>查看crontab日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/cron.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改rsyslog&quot;&gt;&lt;a href=&quot;#修改rsyslog&quot; class=&quot;headerlink&quot; title=&quot;修改rsyslog&quot;&gt;&lt;/a&gt;修改rsyslog&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="crontab" scheme="https://lingjiehao.github.io/tags/crontab/"/>
    
      <category term="log" scheme="https://lingjiehao.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>adb获取手机温度</title>
    <link href="https://lingjiehao.github.io/2019/05/22/adb%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E6%B8%A9%E5%BA%A6/"/>
    <id>https://lingjiehao.github.io/2019/05/22/adb获取手机温度/</id>
    <published>2019-05-22T01:37:09.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>存储温度信息的节点在<code>/sys/class/thermal/</code>目录下，其中<code>thermal_zone*</code>为各传感器对应的文件夹，<br><code>thermal_zone*</code>下有<code>type</code>节点指明该传感器的位置，<code>temp</code>节点代表温度。直接cat这些节点就可以得到相应的信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;存储温度信息的节点在&lt;code&gt;/sys/class/thermal/&lt;/code&gt;目录下，其中&lt;code&gt;thermal_zone*&lt;/code&gt;为各传感器对应的文件夹，&lt;br&gt;&lt;code&gt;thermal_zone*&lt;/code&gt;下有&lt;code&gt;type&lt;/code&gt;节点
      
    
    </summary>
    
    
      <category term="Thermal" scheme="https://lingjiehao.github.io/tags/Thermal/"/>
    
  </entry>
  
  <entry>
    <title>Something about DTB...</title>
    <link href="https://lingjiehao.github.io/2019/05/21/Something-about-DTB/"/>
    <id>https://lingjiehao.github.io/2019/05/21/Something-about-DTB/</id>
    <published>2019-05-21T23:59:08.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><ol><li>mkdtimg - out/host/linux-x86/bin</li></ol><ul><li>将dtb分区转换为dtb文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdtimg dump &lt;image_file&gt; -b &lt;output_file&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这里的 <code>&lt;image_file&gt;</code> 代表dtb/dtbo block, 可以使用dd命令或者cp命令获得; <code>&lt;output_file&gt;</code> 代表你想要的名字.</p><ol start="2"><li>dtc - out/host/linux-x86/bin</li></ol><ul><li>将dtb反编译为dts<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtc -I dtb -O dts &lt;dtb_file&gt; -o &lt;output_file&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这里的<dtb_file>指的是dtb文件,而不是dtb block</dtb_file></p><h2 id="一些重要的参考资料"><a href="#一些重要的参考资料" class="headerlink" title="一些重要的参考资料"></a>一些重要的参考资料</h2><ul><li><a href="http://androidxref.com/9.0.0_r3/xref/external/dtc/Documentation/dt-object-internal.txt" target="_blank" rel="noopener">dt-object-internal.txt</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关工具&quot;&gt;&lt;a href=&quot;#相关工具&quot; class=&quot;headerlink&quot; title=&quot;相关工具&quot;&gt;&lt;/a&gt;相关工具&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;mkdtimg - out/host/linux-x86/bin&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将dt
      
    
    </summary>
    
    
  </entry>
  
</feed>
