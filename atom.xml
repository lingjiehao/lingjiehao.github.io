<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingjiehao.github.io/"/>
  <updated>2020-07-21T04:04:01.800Z</updated>
  <id>https://lingjiehao.github.io/</id>
  
  <author>
    <name>Hao Lingjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android中编译单个内核模块</title>
    <link href="https://lingjiehao.github.io/2019/06/25/Android%E4%B8%AD%E7%BC%96%E8%AF%91%E5%8D%95%E4%B8%AA%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/"/>
    <id>https://lingjiehao.github.io/2019/06/25/Android中编译单个内核模块/</id>
    <published>2019-06-25T21:55:27.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>环境: Ubuntu 16.04 + Android P源码<br>源码路径: /home/michael/android_code<br>需要编译的模块路径: 比如 <code>/home/michael/test_module/</code>, 内核模块文件名为<code>test_module.c</code></p><p>那么只需要在<code>/home/michael/test_module/</code>中建立一个Makefile文件就可以编译这个模块了.<br>Makefile的模板如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">obj-m += test_module.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android 源码路径</span></span><br><span class="line">SOURCE_PATH := /home/michael/android_src</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel 的输出目录, &lt;product-name&gt; 因产品而异,下文同</span></span><br><span class="line">KDIR := <span class="variable">$(SOURCE_PATH)</span>/out/target/product/&lt;product-name&gt;/obj/KERNEL_OBJ</span><br><span class="line">PWD :=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line">KERNEL_CFLAGS := KCFLAGS=-mno-android</span><br><span class="line">CROSS := <span class="variable">$(SOURCE_PATH)</span>/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(FLAGS)</span> <span class="variable">$(KDIR)</span> ARCH=arm64 CROSS_COMPILE=<span class="variable">$(CROSS)</span>/aarch64-linux-android- M=<span class="variable">$(PWD)</span> <span class="variable">$(FLAGS)</span> <span class="variable">$(KERNEL_CFLAGS)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.mod.c *.ko *.o .*.cmd *.symvers *.order</span><br><span class="line">rm -rf .tmp_versions</span><br></pre></td></tr></table></figure><p>然后在<code>/home/michael/test_module</code>中输入<code>make</code>, 就会生成下面的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">michael@cd1cab25653e:~/test_module$ make</span><br><span class="line">/usr/bin/makex: line 20: build/envsetup.sh: No such file or directory</span><br><span class="line">/usr/bin/make2 -C  /home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/KERNEL_OBJ ARCH=arm64 CROSS_COMPILE=/home/michael/android_code/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android- M=/home/michael/test_module  KCFLAGS=-mno-android modules</span><br><span class="line">make2[1]: Entering directory '/home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/kernel/msm-4.4'</span><br><span class="line">  CC [M]  /home/michael/test_module/test_module.o</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      /home/michael/test_module/test_module.mod.o</span><br><span class="line">  LD [M]  /home/michael/test_module/test_module.ko</span><br><span class="line">make2[1]: Leaving directory '/home/michael/android_code/out/target/product/&lt;product-name&gt;/obj/kernel/msm-4.4'</span><br><span class="line">michael@cd1cab25653e:~/test_module$ ls -la</span><br><span class="line">total 628</span><br><span class="line">drwxrwxr-x  3 michael michael   4096 Jun 26 14:14 .</span><br><span class="line">drwxr-xr-x 17 michael michael   4096 Jun 26 14:14 ..</span><br><span class="line">-rw-rw-r--  1 michael michael    483 Jun 26 14:14 .test_module.ko.cmd</span><br><span class="line">-rw-rw-r--  1 michael michael  41291 Jun 26 14:14 .test_module.mod.o.cmd</span><br><span class="line">-rw-rw-r--  1 michael michael  51771 Jun 26 14:14 .test_module.o.cmd</span><br><span class="line">drwxrwxr-x  2 michael michael   4096 Jun 26 14:14 .tmp_versions</span><br><span class="line">-rw-rw-r--  1 michael michael    492 Jun 26 14:14 Makefile</span><br><span class="line">-rw-rw-r--  1 michael michael      0 Jun 26 14:14 Module.symvers</span><br><span class="line">-rw-rw-r--  1 michael michael     52 Jun 26 14:14 modules.order</span><br><span class="line">-rw-rw-r--  1 michael michael  10276 May 30 11:14 test_module.c</span><br><span class="line">-rw-rw-r--  1 michael michael 247216 Jun 26 14:14 test_module.ko</span><br><span class="line">-rw-rw-r--  1 michael michael   2277 Jun 26 14:14 test_module.mod.c</span><br><span class="line">-rw-rw-r--  1 michael michael  83424 Jun 26 14:14 test_module.mod.o</span><br><span class="line">-rw-rw-r--  1 michael michael 165320 Jun 26 14:14 test_module.o</span><br></pre></td></tr></table></figure><p>我目前编译的模块都是单文件的,多文件还未尝试,以后遇到编译多文件的时候会更新.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境: Ubuntu 16.04 + Android P源码&lt;br&gt;源码路径: /home/michael/android_code&lt;br&gt;需要编译的模块路径: 比如 &lt;code&gt;/home/michael/test_module/&lt;/code&gt;, 内核模块文件名为&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mount RAW file in Ubuntu</title>
    <link href="https://lingjiehao.github.io/2019/06/06/%E6%8C%82%E8%BD%BDimg%E6%96%87%E4%BB%B6/"/>
    <id>https://lingjiehao.github.io/2019/06/06/挂载img文件/</id>
    <published>2019-06-06T20:43:46.000Z</published>
    <updated>2020-07-21T09:00:18.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讲解如何在Ubuntu下挂载raw image镜像，以raspberry pi官方镜像<strong>2019-04-08-raspbian-stretch-lite.img</strong> 为例</p></blockquote><h2 id="手动挂载"><a href="#手动挂载" class="headerlink" title="手动挂载"></a>手动挂载</h2><ol><li>使用fdisk查看分区结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># fdisk -l</span><br><span class="line"></span><br><span class="line">Disk 2019-04-08-raspbian-stretch-lite.img: 1.7 GiB, 1803550720 bytes, 3522560 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xc1dc39e5</span><br><span class="line"></span><br><span class="line">Device                                Boot Start     End Sectors  Size Id Type</span><br><span class="line">2019-04-08-raspbian-stretch-lite.img1       8192   96042   87851 42.9M  c W95 FA</span><br><span class="line">2019-04-08-raspbian-stretch-lite.img2      98304 3522559 3424256  1.6G 83 Linux</span><br></pre></td></tr></table></figure><p>可以看出，这份镜像的sectors size = 512 bytes，而第一个分区的偏移量是8192 sectors，故偏移的字节为512 * 8192 = 4194304 bytes，下面用mount命令挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mount -o offset=4194304 2019-04-08-raspbian-stretch-lite.img tmp/</span><br></pre></td></tr></table></figure><p>第二个分区同理</p><h2 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h2><p>可以使用losetup这个工具自动挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># losetup -f -P 2019-04-08-raspbian-stretch-lite.img</span><br></pre></td></tr></table></figure><p>查看挂载结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ losetup -l</span><br><span class="line">NAME       SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE                                                    DIO LOG-SEC</span><br><span class="line">/dev/loop0         0      0         0  0 /home/michael/Downloads/2019-04-08-raspbian-stretch-lite.img   0     512</span><br></pre></td></tr></table></figure><p>或者使用lsblk查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">loop0         7:0    0   1.7G  0 loop </span><br><span class="line">├─loop0p1   259:6    0  42.9M  0 loop </span><br><span class="line">└─loop0p2   259:7    0   1.6G  0 loop</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/loop0p1 tmp</span><br></pre></td></tr></table></figure><p>附上losetup的参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ losetup --help</span><br><span class="line">Usage:</span><br><span class="line"> losetup [options] [&lt;loopdev&gt;]</span><br><span class="line"> losetup [options] -f | &lt;loopdev&gt; &lt;file&gt;</span><br><span class="line"></span><br><span class="line">Set up and control loop devices.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -a, --all                     list all used devices</span><br><span class="line"> -d, --detach &lt;loopdev&gt;...     detach one or more devices</span><br><span class="line"> -D, --detach-all              detach all used devices</span><br><span class="line"> -f, --find                    find first unused device</span><br><span class="line"> -c, --set-capacity &lt;loopdev&gt;  resize the device</span><br><span class="line"> -j, --associated &lt;file&gt;       list all devices associated with &lt;file&gt;</span><br><span class="line"> -L, --nooverlap               avoid possible conflict between devices</span><br><span class="line"></span><br><span class="line"> -o, --offset &lt;num&gt;            start at offset &lt;num&gt; into file</span><br><span class="line">     --sizelimit &lt;num&gt;         device is limited to &lt;num&gt; bytes of the file</span><br><span class="line"> -b  --sector-size &lt;num&gt;       set the logical sector size to &lt;num&gt;</span><br><span class="line"> -P, --partscan                create a partitioned loop device</span><br><span class="line"> -r, --read-only               set up a read-only loop device</span><br><span class="line">     --direct-io[=&lt;on|off&gt;]    open backing file with O_DIRECT</span><br><span class="line">     --show                    print device name after setup (with -f)</span><br><span class="line"> -v, --verbose                 verbose mode</span><br><span class="line"></span><br><span class="line"> -J, --json                    use JSON --list output format</span><br><span class="line"> -l, --list                    list info about all or specified (default)</span><br><span class="line"> -n, --noheadings              don&apos;t print headings for --list output</span><br><span class="line"> -O, --output &lt;cols&gt;           specify columns to output for --list</span><br><span class="line">     --raw                     use raw --list output format</span><br><span class="line"></span><br><span class="line"> -h, --help                    display this help</span><br><span class="line"> -V, --version                 display version</span><br><span class="line"></span><br><span class="line">Available output columns:</span><br><span class="line">         NAME  loop device name</span><br><span class="line">    AUTOCLEAR  autoclear flag set</span><br><span class="line">    BACK-FILE  device backing file</span><br><span class="line">     BACK-INO  backing file inode number</span><br><span class="line"> BACK-MAJ:MIN  backing file major:minor device number</span><br><span class="line">      MAJ:MIN  loop device major:minor number</span><br><span class="line">       OFFSET  offset from the beginning</span><br><span class="line">     PARTSCAN  partscan flag set</span><br><span class="line">           RO  read-only device</span><br><span class="line">    SIZELIMIT  size limit of the file in bytes</span><br><span class="line">          DIO  access backing file with direct-io</span><br><span class="line">      LOG-SEC  logical sector size in bytes</span><br><span class="line"></span><br><span class="line">For more details see losetup(8).</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://major.io/2010/12/14/mounting-a-raw-partition-file-made-with-dd-or-dd_rescue-in-linux/" target="_blank" rel="noopener">https://major.io/2010/12/14/mounting-a-raw-partition-file-made-with-dd-or-dd_rescue-in-linux/</a></p><p><a href="https://blog.tinned-software.net/mount-raw-image-of-entire-disc/" target="_blank" rel="noopener">https://blog.tinned-software.net/mount-raw-image-of-entire-disc/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要讲解如何在Ubuntu下挂载raw image镜像，以raspberry pi官方镜像&lt;strong&gt;2019-04-08-raspbian-stretch-lite.img&lt;/strong&gt; 为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04下Android O编译环境的搭建</title>
    <link href="https://lingjiehao.github.io/2019/05/23/Ubuntu-16-04%E4%B8%8BAndroid-O%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://lingjiehao.github.io/2019/05/23/Ubuntu-16-04下Android-O编译环境的搭建/</id>
    <published>2019-05-23T18:45:58.000Z</published>
    <updated>2020-07-21T04:04:01.800Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于安卓编译环境搭建的文章有不少，但质量参差不齐，关于安装哪些软件各有各的说法，这样带来的后果是如果编译出错了，就眉毛胡子一把抓，把所有人说的所有的软件都安装上去，这样有可能带来的问题会更多。</p><p>我搭建编译境的时候幸运地在DigitalOcean上找到了一篇详细介绍安卓编译环境搭建的文章,了解DigitalOcean的人都知道他家的文章质量很高，这篇也不例外，我按照文中的方法搭建后，在AOSP8.1以及公司的代码上都是一次编译成功。</p><p>以下是简单的安装记录，详细介绍请参考<a href="https://www.digitalocean.com/community/tutorials/how-to-build-android-roms-on-ubuntu-16-04" target="_blank" rel="noopener">原文</a>。</p><h2 id="安装repo"><a href="#安装repo" class="headerlink" title="安装repo"></a>安装repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install repo</span><br></pre></td></tr></table></figure><h2 id="配置git的email和username"><a href="#配置git的email和username" class="headerlink" title="配置git的email和username"></a>配置git的email和username</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "your name"</span><br><span class="line">git config --global user.email "mailto:your_email@your_domain.com"</span><br></pre></td></tr></table></figure><h2 id="安装编译所需的软件包"><a href="#安装编译所需的软件包" class="headerlink" title="安装编译所需的软件包"></a>安装编译所需的软件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk android-tools-adb bc bison build-essential curl flex g++-multilib gcc-multilib gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc yasm zip zlib1g-dev</span><br></pre></td></tr></table></figure><p>上面三步完成后就可以拉代码编译了，关于如何使用repo拉代码，如何编译不再本文讨论的范围内。</p><p><strong>下面两步是独立的且可选的</strong></p><h2 id="使用ccache加快每次重新编译的速度"><a href="#使用ccache加快每次重新编译的速度" class="headerlink" title="使用ccache加快每次重新编译的速度"></a>使用ccache加快每次重新编译的速度</h2><h3 id="下载ccache"><a href="#下载ccache" class="headerlink" title="下载ccache"></a>下载ccache</h3><p>（注：原文中不是使用apt安装ccache的，而是使用源码中自带ccache，我在源码中没找到，所以使用apt安装了ccache）</p><h3 id="修改ccache所使用的缓存大小"><a href="#修改ccache所使用的缓存大小" class="headerlink" title="修改ccache所使用的缓存大小"></a>修改ccache所使用的缓存大小</h3><p>ccache默认使用的缓存最大值为1G，原文推荐修改为15G，你当然可以设置更大的缓存空间，ccache生成的缓存默认位于用户主目录的.ccache目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccache -M 15G</span><br></pre></td></tr></table></figure><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export USE_CCACHE=1</span><br></pre></td></tr></table></figure><p>为了永久生效，你可以把上面这句话添加到.bashrc中（如果你使用bash的话）。</p><h2 id="限制Jack-Server的内存使用"><a href="#限制Jack-Server的内存使用" class="headerlink" title="限制Jack Server的内存使用"></a>限制Jack Server的内存使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_JACK_VM_ARGS="-Xmx8g -Dfile.encoding=UTF-8 -XX:+TieredCompilation"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上关于安卓编译环境搭建的文章有不少，但质量参差不齐，关于安装哪些软件各有各的说法，这样带来的后果是如果编译出错了，就眉毛胡子一把抓，把所有人说的所有的软件都安装上去，这样有可能带来的问题会更多。&lt;/p&gt;
&lt;p&gt;我搭建编译境的时候幸运地在DigitalOcean上找到了一篇
      
    
    </summary>
    
    
  </entry>
  
</feed>
